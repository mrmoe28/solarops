# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AgentTask {
  agentType: AgentType!
  attempts: Float!
  completedAt: DateTime
  createdAt: DateTime!
  error: String
  id: ID!
  input: String
  output: String
  projectId: String!
  startedAt: DateTime
  status: TaskStatus!
  updatedAt: DateTime!
}

enum AgentType {
  OPEN_SOLAR
  PARCEL_INFO
  PERMIT_OFFICE
  PROPOSAL
}

type AuthResponse {
  token: String!
  user: User!
}

input CreateEquipmentWithPricingInput {
  categoryId: String!
  description: String
  imageUrl: String
  isActive: Boolean
  manufacturer: String!
  modelNumber: String!
  name: String!
  specifications: String
  standardPrice: Float!
  vendorPricing: [CreateVendorPricingInput!]
}

input CreateProjectInput {
  address: String!
  city: String!
  name: String!
  state: String!
  zipCode: String!
}

input CreateVendorPricingInput {
  notes: String
  specialPrice: Float!
  validFrom: DateTime
  validUntil: DateTime
  vendorName: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Equipment {
  category: EquipmentCategory!
  categoryId: String!
  createdAt: DateTime!
  description: String
  id: ID!
  imageUrl: String
  isActive: Boolean!
  lowestVendorPrice: Float
  manufacturer: String!
  modelNumber: String!
  name: String!
  specifications: String
  standardPrice: Float!
  updatedAt: DateTime!
  vendorPricing: [VendorPricing!]
}

type EquipmentCategory {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type EquipmentConnection {
  items: [Equipment!]!
  page: Float!
  pageSize: Float!
  total: Float!
  totalPages: Float!
}

input EquipmentFilterInput {
  categoryId: String
  isActive: Boolean
  limit: Int
  manufacturer: String
  page: Int
  priceRange: PriceRangeInput
  search: String
  sortBy: String
  sortOrder: String
}

type Mutation {
  createEquipment(input: CreateEquipmentWithPricingInput!): Equipment!
  createEquipmentCategory(description: String, name: String!): EquipmentCategory!
  createProject(input: CreateProjectInput!): Project!
  createVendorPricing(equipmentId: ID!, input: CreateVendorPricingInput!): VendorPricing!
  deleteEquipment(id: ID!): Boolean!
  deleteProject(id: ID!): Boolean!
  deleteVendorPricing(id: ID!): Boolean!
  generateProposalDownload(id: ID!): String!
  signIn(input: SignInInput!): AuthResponse!
  signUp(input: SignUpInput!): AuthResponse!
  startProjectAnalysis(projectId: ID!): Boolean!
  updateEquipment(input: UpdateEquipmentInput!): Equipment!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  updateVendorPricing(input: UpdateVendorPricingInput!): VendorPricing!
}

type ParcelData {
  electricalPanel: String
  fetchedAt: DateTime!
  id: ID!
  ownerName: String
  parcelNumber: String
  projectId: String!
  propertyType: String
  roofAge: Float
  roofType: String
  squareFootage: Float
  yearBuilt: Float
}

type PermitData {
  applicationLinks: [String!]
  id: ID!
  instructions: String
  permitFees: String
  permitOfficeUrl: String
  projectId: String!
  requirements: String
  scrapedAt: DateTime!
}

input PriceRangeInput {
  max: Float!
  min: Float!
}

type Project {
  address: String!
  city: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  parcelData: ParcelData
  permitData: PermitData
  projectEquipment: [ProjectEquipment!]
  proposal: Proposal
  solarDesign: SolarDesign
  state: String!
  status: ProjectStatus!
  updatedAt: DateTime!
  userId: String!
  zipCode: String!
}

type ProjectEquipment {
  equipmentId: String!
  id: ID!
  notes: String
  projectId: String!
  quantity: Float!
  totalPrice: Float!
  unitPrice: Float!
  vendorUsed: String
}

enum ProjectStatus {
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
}

type Proposal {
  id: ID!
  paybackPeriod: Float
  projectId: String!
  proposalUrl: String
  savings: String
  systemCost: Float
}

type Query {
  agentTasks(projectId: ID!): [AgentTask!]!
  equipment(filters: EquipmentFilterInput): EquipmentConnection!
  equipmentById(id: ID!): Equipment!
  equipmentCategories: [EquipmentCategory!]!
  me: User!
  project(id: ID!): Project
  projects: [Project!]!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  name: String
  password: String!
}

type SolarDesign {
  annualProduction: Float
  bomList: String
  designUrl: String
  id: ID!
  inverterModel: String
  panelCount: Float!
  panelModel: String
  projectId: String!
  systemSize: Float!
}

type Subscription {
  agentTaskUpdated(projectId: ID!): AgentTask!
}

enum TaskStatus {
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
  RETRYING
}

input UpdateEquipmentInput {
  categoryId: String
  description: String
  id: ID!
  imageUrl: String
  isActive: Boolean
  manufacturer: String
  modelNumber: String
  name: String
  specifications: String
  standardPrice: Float
}

input UpdateProjectInput {
  address: String
  city: String
  name: String
  state: String
  zipCode: String
}

input UpdateVendorPricingInput {
  id: ID!
  isActive: Boolean
  notes: String
  specialPrice: Float
  validFrom: DateTime
  validUntil: DateTime
  vendorName: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String
  updatedAt: DateTime!
}

type VendorPricing {
  createdAt: DateTime!
  equipmentId: String!
  id: ID!
  isActive: Boolean!
  notes: String
  specialPrice: Float!
  updatedAt: DateTime!
  validFrom: DateTime
  validUntil: DateTime
  vendorName: String!
}